package com.cesi_tp.banconet.access_data.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class UserController {

  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/adduser") // Map ONLY POST Requests
  public @ResponseBody String addNewUser(
    @RequestParam String name,
    @RequestParam String email
  ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    User user = new User();
    user.setName(name);
    user.setEmail(email);
    userRepository.save(user);
    return "Saved";
  }

  @GetMapping(path = "/alluser")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  /*------------------ Exemple  TEST  CRUD   ------------------*/
  // // GET
  // @GetMapping("/signup")
  // public String showSignUpForm(User user) {
  //   return "add-user";
  // }

  // // POST
  // @PostMapping("/adduser")
  // public String addUser(@Valid User user, BindingResult result, Model model) {
  //   if (result.hasErrors()) {
  //     return "add-user";
  //   }
  //   userRepository.save(user);
  //   model.addAttribute("users", userRepository.findAll());
  //   return "redirect:/index";
  // }

  // // GET/id
  // @GetMapping("/edit/{id}")
  // public String showUpdateForm(@PathVariable("id") long id, Model model) {
  //   User user = userRepository
  //     .findById(id)
  //     .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
  //   model.addAttribute("user", user);
  //   return "update-user";
  // }

  // // UPDATE
  // @PostMapping("/update/{id}")
  // public String updateUser(
  //   @PathVariable("id") long id,
  //   @Valid User user,
  //   BindingResult result,
  //   Model model
  // ) {
  //   if (result.hasErrors()) {
  //     user.setId(id);
  //     return "update-user";
  //   }
  //   userRepository.save(user);
  //   model.addAttribute("users", userRepository.findAll());
  //   return "redirect:/index";
  // }

  // // DELETE
  // @GetMapping("/delete/{id}")
  // public String deleteUser(@PathVariable("id") long id, Model model) {
  //   User user = userRepository
  //     .findById(id)
  //     .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
  //   userRepository.delete(user);
  //   model.addAttribute("users", userRepository.findAll());
  //   return "index";
  // }
}
